{
"conftest.py": """import pytest
from service import app as flask_app
from service.models import db, init_db, Item


@pytest.fixture(scope="module")
def test_app():
    """Create and configure a new app instance for each test module."""
    flask_app.config["TESTING"] = True
    flask_app.config["DEBUG"] = False
    flask_app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///:memory:"
    flask_app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

    init_db(flask_app)

    yield flask_app

@pytest.fixture(scope="module")
def client(test_app):
    """A test client for the app."""
    return test_app.test_client()

@pytest.fixture(scope="function", autouse=True)
def db_session():
    """Creates a new database session for a test."""
    db.session.remove()
    db.drop_all()
    db.create_all()
    yield db.session
    db.session.remove()""",
"test_routes.py": """import pytest
from tests.unit_test.factories import ItemFactory
from service.models import db, Item, init_db
from service.routes import app


def test_index(client):
    """ This should get 200_OK from the Index Page. """
    response = client.get('/')
    assert response.status_code == 200
""",
"test_models.py": """from service import app
from service.models import Item, db
from tests.unit_test.factories import ItemFactory


def test_create_an_item():
    """ It should Create an Item and assert that it exists. """
    fake_item = ItemFactory()
    item = Item(text=fake_item.text)

    assert item is not None
    assert item.id is None
    assert item.text == fake_item.text


def test_add_an_item(db_session):
    """ It should add an Item to the database. """
    items = Item.get_all_items()
    assert len(items) == 0

    fake_item = ItemFactory()
    fake_item.add_to_db()

    assert fake_item.id is not None
    items = Item.get_all_items()
    assert len(items) == 1

def test_get_all_items(db_session):
    items = Item.get_all_items()
    assert len(items) == 0

    fake_items = [ItemFactory() for _ in range(3)]
    for item in fake_items:
        item.add_to_db()

    items = Item.get_all_items()
    assert len(items) == 3
""",
"factories.py": """import factory
from service.models import Item

class ItemFactory(factory.Factory):
    """ Factory for creating fake Items. """

    class Meta:
        model = Item


    id = factory.Sequence(lambda n: n)
    text = factory.Faker('sentence', nb_words=4)
""",
"config.py": """class Config:
    """ Base configuration class with default settings. """
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SECRET_KEY = 'your_secret_key'  # You might want to change this in production
    JSON_SORT_KEYS = False  # Optional, to prevent automatic key sorting in JSON responses

class DevelopmentConfig(Config):
    """ Development configuration with PostgreSQL database. """
    ENV = 'development'
    SQLALCHEMY_DATABASE_URI = 'postgresql://postgres:password@db:5432/mydatabase'
    DEBUG = True

class TestingConfig(Config):
    """ Testing configuration with SQLite in-memory database. """
    ENV = 'testing'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    TESTING = True
    DEBUG = False

class ProductionConfig(Config):
    """ Production configuration with PostgreSQL database. """
    ENV = 'production'
    SQLALCHEMY_DATABASE_URI = 'postgresql://postgres:password@db:5432/mydatabase'
    DEBUG = False
""",
"models.py": """from flask_sqlalchemy import SQLAlchemy


db = SQLAlchemy()

def init_db(app):
    """ Initialize the SQLAlchemy app. """
    Item.init_db(app)

class PersistentBase:
    def __init__(self):
        self.id = None

    @classmethod
    def init_db(cls, app):
        """ Initializes the database session. """
        cls.app = app
        db.init_app(app)
        with app.app_context():
            db.create_all()

    @classmethod
    def get_all_items(cls):
        """ Returns all the records in the database. """
        return cls.query.all()


    @classmethod
    def find_item_by_id(cls, by_id):
        """ Finds a record by its ID """
        return cls.query.get(by_id)

    def add_to_db(self):
        """
        Creates an Item and adds it to the database.
        """
        self.id = None  # id must be none to generate next primary key
        db.session.add(self)
        db.session.commit()

    def update_db(self):
        """
        Updates an Item in the database.
        """
        db.session.commit()

    def delete_from_db(self):
        """ Removes an Item from the database. """
        db.session.delete(self)
        db.session.commit()


class Item(db.Model, PersistentBase):
    """
    Class for Item.
    """
    app = None

    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.String(200), nullable=False)

    def __repr__(self):
        return f'<Item {self.text}, id: {self.id}>'


""",
"routes.py": """from flask import render_template, request, redirect, url_for
from . import app
from service.models import Item

@app.route('/')
def index():
    items = Item.get_all_items()
    return render_template('index.html', items=items)

@app.route('/add', methods=('POST',))
def add_item():
    text = request.form.get('text')
    if text:
        item = Item(text=text)
        item.add_to_db()
    return redirect(url_for('index'))

@app.route('/edit/<int:id>', methods=('GET', 'POST'))
def edit_item(id):
    item = Item.find_item_by_id(int(id))
    if request.method == 'POST':
        item.text = request.form.get('text')
        item.update_db()
        return redirect(url_for('index'))
    return render_template('edit.html', item=item)

@app.route('/delete/<int:id>')
def delete_item(id):
    item = Item.find_item_by_id(int(id))
    item.delete_from_db()
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
"""
}

Tree Structure:
.
├── all_files.py
├── docker-compose.yml
├── output.txt
├── __pycache__
├── pytest
├── pytest.ini
├── requirements.txt
├── run.txt
├── service
│   ├── config.py
│   ├── Dockerfile
│   ├── __init__.py
│   ├── models.py
│   ├── __pycache__
│   │   ├── config.cpython-312.pyc
│   │   ├── __init__.cpython-312.pyc
│   │   ├── models.cpython-312.pyc
│   │   └── routes.cpython-312.pyc
│   ├── requirements.txt
│   ├── routes.py
│   └── templates
│       ├── edit.html
│       └── index.html
└── tests
    ├── conftest.py
    ├── __init__.py
    ├── __pycache__
    │   ├── conftest.cpython-312-pytest-8.3.3.pyc
    │   ├── __init__.cpython-312.pyc
    │   └── test_models.cpython-312-pytest-8.3.3.pyc
    └── unit_test
        ├── factories.py
        ├── __init__.py
        ├── __pycache__
        │   ├── factories.cpython-312.pyc
        │   ├── __init__.cpython-312.pyc
        │   ├── test_models.cpython-312-pytest-8.3.3.pyc
        │   └── test_routes.cpython-312-pytest-8.3.3.pyc
        ├── test_models.py
        └── test_routes.py

9 directories, 32 files
